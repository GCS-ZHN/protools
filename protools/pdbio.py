from typing import Iterable, Union, overload
from Bio.PDB.Atom import Atom
from Bio.PDB.Chain import Chain
from Bio.PDB.Model import Model
from Bio.PDB.Structure import Structure
from Bio.PDB.PDBIO import PDBIO
from Bio.PDB import PDBParser

__all__ = ["save_to_pdb"]

@overload
def save_to_pdb(output_path: str, *entities: Model, remarks: Iterable[str]=None) -> None:
    ...

@overload
def save_to_pdb(output_path: str, *entities: Chain, remarks: Iterable[str]=None) -> None:
    ...

@overload
def save_to_pdb(output_path: str, *entities: Atom, remarks: Iterable[str]=None) -> None:
    ...

def save_to_pdb(output_path: str, *entities: Union[Model, Chain, Atom], remarks: Iterable[str]=None) -> None:
    """
    Save entities to a PDB file.

    Parameters
    ----------
    output_path : str
        Path to the output PDB file.
    entities : Model, Chain, or Atom
        Entities to save.
    remarks : Iterable[str], optional
        Remarks to be written to the PDB file.

    Raises
    ------
    ValueError
        If no entities are provided or if the
        entities are not of the same type.

    TypeError
        If the entities are not of type Model,
        Chain, or Atom.
    """
    if len(entities) == 0:
        raise ValueError("No entities to save")
    
    # check if all entities are of the same type
    if not all(isinstance(entity, type(entities[0])) for entity in entities):
        raise ValueError("All entities must be of the same type")
    
    if isinstance(entities[0], Model):
        structure = Structure("pdb")
        for model in entities:
            structure.add(model)
        pdb_io = PDBIO()
        pdb_io.set_structure(structure)
        with open(output_path, "w") as fp:
            # write remarks
            fp.write("REMARK 220 Generated by Python\n")

            if remarks is not None:
                for remark in remarks:
                    fp.write(f"REMARK 999 {remark}\n")
            pdb_io.save(fp)

    elif isinstance(entities[0], Chain):
        model = Model("model")
        for chain in entities:
            model.add(chain)
        save_to_pdb(output_path, model, remarks=remarks)

    elif isinstance(entities[0], Atom):
        chain = Chain("chain")
        for atom in entities:
            chain.add(atom)
        save_to_pdb(output_path, chain, remarks=remarks)

    else:
        raise TypeError(f"Unsupported type {type(entities[0])}")
